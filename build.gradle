buildscript {
  repositories { jcenter() }

  dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0' }
}
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'java'
apply plugin: 'eclipse'

task wrapper(type: Wrapper) { gradleVersion = '3.2.1' }

repositories { mavenCentral() }

sourceSets { jdotsoft }

dependencies {
  compile sourceSets.jdotsoft.output
  compile 'com.google.code.findbugs:jsr305:3.0.1'
  compile 'com.google.guava:guava:20.0'
}

// ----------------------------------------------------------------------------------------------------
//        _
//       | |  __ _  _ __
//    _  | | / _` || '__|
//   | |_| || (_| || |
//    \___/  \__,_||_|
//
// ----------------------------------------------------------------------------------------------------

jar {
  exclude 'de/adrodoc55/minecraft/mpl/main/MplCompilerMainLauncher.class'
  manifest {
    attributes(
        'Created-By':               'Adrodoc55 (adrodoc55@googlemail.com)',
        'Main-Class':               'de.adrodoc55.minesweeper.main.MinesweeperMain',
        )
  }
}

task standaloneJar(type: Jar) {
  from sourceSets.main.output
  configurations.runtime.each { File file ->
    if(file.isDirectory()) {
      from file
    } else if (file.isFile() && file.name.endsWith('.jar')) {
      from(file) { into '/lib' }
    }
  }
  manifest {
    attributes(
        'Created-By':               'Adrodoc55 (adrodoc55@googlemail.com)',
        'Main-Class':               'de.adrodoc55.minesweeper.main.MinesweeperMainLauncher',
        )
  }
  classifier 'standalone'
}
assemble.dependsOn standaloneJar
test.dependsOn standaloneJar // wegen tests des standalone Jars

// ----------------------------------------------------------------------------------------------------
//    ____                                             _
//   / ___|   ___   _   _  _ __  ___  ___  ___        | |  __ _  _ __
//   \___ \  / _ \ | | | || '__|/ __|/ _ \/ __|    _  | | / _` || '__|
//    ___) || (_) || |_| || |  | (__|  __/\__ \   | |_| || (_| || |
//   |____/  \___/  \__,_||_|   \___|\___||___/    \___/  \__,_||_|
//
// ----------------------------------------------------------------------------------------------------

task sourcesJar(type: Jar) {
  sourceSets.all { from it.allSource }
  includeEmptyDirs = false
  duplicatesStrategy = 'exclude'
  classifier 'sources'
}
assemble.dependsOn sourcesJar

// ----------------------------------------------------------------------------------------------------
//        _                          _                      _
//       | |  __ _ __   __ __ _   __| |  ___    ___        | |  __ _  _ __
//    _  | | / _` |\ \ / // _` | / _` | / _ \  / __|    _  | | / _` || '__|
//   | |_| || (_| | \ V /| (_| || (_| || (_) || (__    | |_| || (_| || |
//    \___/  \__,_|  \_/  \__,_| \__,_| \___/  \___|    \___/  \__,_||_|
//
// ----------------------------------------------------------------------------------------------------

javadoc {
  options.addStringOption('Xdoclint:all,-syntax', '-quiet')
}

task javadocJar(type: Jar) {
  from javadoc
  includeEmptyDirs = false
  duplicatesStrategy = 'exclude'
  classifier = 'javadoc'
}
assemble.dependsOn javadocJar
